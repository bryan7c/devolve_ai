import { useState, useEffect } from "react";
import Head from "next/head";
import { InternalLayout } from "@/src/layout/internalLayout";
import {
  Button,
  Chip,
  Dialog,
  DialogActions,
  DialogContent,
  DialogContentText,
  DialogTitle,
  Divider,
  Grid,
  IconButton,
  InputBase,
  MenuItem,
  Paper,
} from "@mui/material";
import {
  deleteReturnedItem,
  getReturnedItems,
} from "@/src/services/ReturnedService";
import CardReturnedItem from "@/src/components/CardReturnedItem/CardReturnedItem";
import ActionMenu from "@/src/components/ActionMenu/ActionMenu";
import { Search } from "@mui/icons-material";
import { DatePicker, LocalizationProvider } from "@mui/x-date-pickers";
import { useRouter } from 'next/router';
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import "dayjs/locale/pt-br";

function ReturnedPage() {
  const [originalReturnedList, setOriginalReturnedList] = useState([]);
  const [returnedList, setReturnedList] = useState([]);
  const [open, setOpen] = useState(false);
  const [selectedReturnedItemId, setSelectedReturnedItemId] = useState(null);
  const [searchValue, setSearchValue] = useState("");
  const [statusFilter, setStatusFilter] = useState("");
  const router = useRouter();

  const handleSearchChange = (event) => {
    setSearchValue(event.target.value);
  };

  const handleSearchSubmit = () => {
    if (searchValue === "") {
      // Se o valor de pesquisa estiver vazio, exiba todas as devoluções
      setReturnedList(originalReturnedList);
    } else {
      // Caso contrário, filtre as devoluções com base no valor de pesquisa
      setReturnedList(
        originalReturnedList.filter((returnedItem) =>
          returnedItem.titulo
            .toLowerCase()
            .includes(searchValue.toLowerCase())
        )
      );
    }
  };

  const handleDeleteConfirmation = (returnedItemId) => {
    setSelectedReturnedItemId(returnedItemId);
    setOpen(true);
  };

  const handleClose = () => {
    setSelectedReturnedItemId(null);
    setOpen(false);
  };

  useEffect(() => {
    async function fetchReturned() {
      getReturnedItems().then((data) => {
        setOriginalReturnedList(data);
        setReturnedList(data);
      });
    }

    fetchReturned();
  }, []);

  const handleEdit = (returnedItemId) => {
    router.push(`/devolucao/${returnedItemId}`)
  };

  const handleDelete = () => {
    deleteReturnedItem(selectedReturnedItemId).then(() => {
      setOriginalReturnedList(
        originalReturnedList.filter(
          (returnedItem) => returnedItem._id !== selectedReturnedItemId
        )
      );
      setReturnedList(
        returnedList.filter(
          (returnedItem) => returnedItem._id !== selectedReturnedItemId
        )
      );
      handleClose();
    });
  };

  const handleStatusFilter = (status) => {
    if (statusFilter === status) {
      setStatusFilter("");
      // Se o valor de pesquisa estiver vazio, exiba todas as devoluções
      setReturnedList(originalReturnedList);
    } else {
      // Caso contrário, filtre as devoluções com base no valor de pesquisa
      setReturnedList(
        originalReturnedList.filter(
          (returnedItem) =>
            returnedItem.status.toLowerCase() === status.toLowerCase()
        )
      );
    }
    setStatusFilter(status);
  };

  const handleDateFilter = (date) => {
    const dataLimite = new Date(date).getTime();
    if (date === null) {
      setReturnedList(originalReturnedList);
    } else {
      setReturnedList(
        originalReturnedList.filter((returnedItem) => {
          const itemDate = new Date(returnedItem.dataLimite).getTime();
          return itemDate <= dataLimite;
        })
      );
    }
  };

  return (
    <>
      <Head>
        <title>Devolução</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Paper
        sx={{
          p: "2px 4px",
          display: "flex",
          alignItems: "center",
          marginBottom: 2,
        }}
      >
        <IconButton type="button" sx={{ p: "10px" }} aria-label="search">
          <Search />
        </IconButton>
        <InputBase
          sx={{ ml: 1, flex: 1 }}
          placeholder="Pesquisar devolução"
          value={searchValue}
          onChange={handleSearchChange}
          onKeyDown={(event) => {
            if (event.key === "Enter") {
              handleSearchSubmit();
            }
          }}
        />
        <Divider sx={{ height: 28, m: 0.5 }} orientation="vertical" />
        <LocalizationProvider dateAdapter={AdapterDayjs} adapterLocale="pt-br">
          <DatePicker
            label="Data limite"
            onChange={(newDate) => handleDateFilter(newDate)}
          />
        </LocalizationProvider>
        <Chip
          color="info"
          onClick={(event) => handleStatusFilter(event.target.dataset.status)}
          size="small"
          data-status="Em andamento"
          sx={{ height: 20, width: 40, margin: "0 .3em" }}
          variant="solid"
        />
        <Chip
          color="secondary"
          onClick={(event) => handleStatusFilter(event.target.dataset.status)}
          size="small"
          data-status="Aguardando"
          sx={{ height: 20, width: 40, margin: "0 .3em" }}
          variant="solid"
        />
        <Chip
          color="success"
          onClick={(event) => handleStatusFilter(event.target.dataset.status)}
          size="small"
          data-status="Finalizado"
          sx={{ height: 20, width: 40, margin: "0 .3em" }}
          variant="solid"
        />
      </Paper>
      <Grid container spacing={2}>
        {returnedList.map((returnedItem) => (
          <CardReturnedItem
            key={returnedItem._id}
            returnedItem={returnedItem}
            action={
              <ActionMenu>
                <MenuItem onClick={() => handleEdit(returnedItem._id)}>
                  Editar
                </MenuItem>
                <MenuItem
                  onClick={() => handleDeleteConfirmation(returnedItem._id)}
                >
                  Excluir
                </MenuItem>
              </ActionMenu>
            }
          />
        ))}
      </Grid>
      <Dialog
        open={open}
        onClose={handleClose}
        aria-labelledby="responsive-dialog-title"
      >
        <DialogTitle id="responsive-dialog-title">
          {"Deletar devolução?"}
        </DialogTitle>
        <DialogContent>
          <DialogContentText>
            Tem certeza que deseja excluir este item?
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button autoFocus onClick={handleClose}>
            Cancelar
          </Button>
          <Button onClick={handleDelete} autoFocus>
            Deletar
          </Button>
        </DialogActions>
      </Dialog>
    </>
  );
}
ReturnedPage.PageLayout = InternalLayout;

export default ReturnedPage;
