import { useState } from "react";
import Head from "next/head";
import { InternalLayout } from "@/src/layout/internalLayout";
import { useRouter } from "next/router";
import { Grid, Typography, Button, Dialog, DialogTitle, DialogContent, DialogActions, DialogContentText, Snackbar, Alert } from "@mui/material";
import dynamic from "next/dynamic";
import { useLoadScript } from "@react-google-maps/api";
import ProfileFeedback from "@/src/components/Profile/ProfileFeedback";
import { deleteReturnedItem, getReturnedItems, updateReturnedItem } from "@/src/services/ReturnedService";

const Map = dynamic(() => import("@/src/components/Map/index"), { ssr: false });

export async function getServerSideProps({ query }) {
  const googleKey = process.env.GOOGLE_MAP_KEY;
  const id = query.id.toString();
  const returnedItem = await getReturnedItems({id});
  const returnedItemList = await getReturnedItems({devolvedor: returnedItem[0].devolvedor._id});
  const ratingList = returnedItemList
    .filter(item => item.nota !== null)
    .map(item => item.nota)
  const averageRating = ratingList.reduce((total, rating) => total + rating, 0) / ratingList.length
  returnedItem[0].rating = averageRating

  return {
    props: {
      returnedItem: returnedItem[0],
      googleKey,
    },
  };
}

const libraries = ["places"];
function ReturnedPage({ returnedItem, googleKey }) {
  const router = useRouter();
  const [locations, setLocations] = useState([]);
  const [destination, setDestination] = useState(returnedItem.destino);
  const [open, setOpen] = useState(false);
  const [selectedReturnedItemId, setSelectedReturnedItemId] = useState(null);
  const [alertOpen, setAlertOpen] = useState(false);
  const [alertMessage, setAlertMessage] = useState("");
  const [alertType, setAlertType] = useState("success");

  const handleAlertClose = (event, reason) => {
    if (reason === 'clickaway') {
      return;
    }

    setAlertOpen(false);
  };

  const handleRating = (rating) => {
    returnedItem.nota = rating;
    updateReturnedItem(returnedItem).then(() => {
      showAlert("Nota atualizada com sucesso!", "success");
    })
    .catch((error) => {
      showAlert(error.message, "error");
    });
  };

  const showAlert = (message, type) => {
    setAlertMessage(message);
    setAlertType(type);
    setAlertOpen(true);
  }

  const handleClose = () => {
    setSelectedReturnedItemId(null);
    setOpen(false);
  };

  const handleDeleteConfirmation = (returnedItemId) => {
    setSelectedReturnedItemId(returnedItemId);
    setOpen(true);
  };

  const handleDelete = () => {
    deleteReturnedItem(selectedReturnedItemId).then(() => {
      router.back();
    });
  };

  const { isLoaded } = useLoadScript({
    googleMapsApiKey: googleKey,
    libraries: libraries,
    id: "google-map-script",
  });

  return (
    <>
      <Snackbar
        open={alertOpen}
        autoHideDuration={6000}
        onClose={handleAlertClose}
      >
        <Alert onClose={handleAlertClose} severity={alertType} sx={{ width: '100%' }}>
          {alertMessage}
        </Alert>
      </Snackbar>
      <Head>
        <title>Acompanhando a devolução {returnedItem.titulo}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Grid container item minHeight={"75vh"} flexDirection={"column"}>
        <Grid item xs>
          <Map
            locations={locations}
            destination={destination}
            loadScript={isLoaded}
            manualOrigin={returnedItem.origem}
          />
        </Grid>
        <Grid
          container
          item
          xs={"auto"}
          alignContent="center"
          p={2}
          spacing={4}
        >
          <Grid item xs={"auto"}>
            <ProfileFeedback
              title={returnedItem.devolvedor.nome}
              rating={returnedItem.rating}
              img={"/img/jose.png"}
              onRating={rating => handleRating(rating)}
            />
          </Grid>
          <Grid
            container
            item
            flexDirection="column"
            xs
            justifyContent="center"
          >
            <Grid item>
              <Typography>O devolvedor chegará em</Typography>
            </Grid>
            <Grid item>
              <Typography
                display="inline"
                sx={{ fontSize: "2em", fontWeight: "bolder" }}
                color="primary"
              >
                20
              </Typography>
              <Typography display="inline">min</Typography>
            </Grid>
          </Grid>
          <Grid container item xs="auto" alignContent="center" spacing={2}>
            <Grid item>
              <Button color="gray" onClick={router.back}>VOLTAR</Button>
            </Grid>
            <Grid item>
              <Button variant="contained" color="warning" onClick={() => handleDeleteConfirmation(returnedItem._id)}>
                CANCELAR ENTREGA
              </Button>
            </Grid>
          </Grid>
        </Grid>
      </Grid>
      <Dialog
        open={open}
        onClose={handleClose}
        aria-labelledby="responsive-dialog-title"
      >
        <DialogTitle id="responsive-dialog-title">
          {"Deletar devolução?"}
        </DialogTitle>
        <DialogContent>
          <DialogContentText>
            Tem certeza que deseja excluir este item?
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button autoFocus onClick={handleClose}>
            Cancelar
          </Button>
          <Button onClick={handleDelete} autoFocus>
            Deletar
          </Button>
        </DialogActions>
      </Dialog>
    </>
  );
}
ReturnedPage.PageLayout = InternalLayout;

export default ReturnedPage;
