import { useState } from "react";
import Head from "next/head";
import { InternalLayout } from "@/src/layout/internalLayout";
import { useRouter } from "next/router";
import { Grid, Paper } from "@mui/material";
import dayjs from "dayjs";
import "dayjs/locale/pt-br";
import dynamic from "next/dynamic";
import { useLoadScript } from "@react-google-maps/api";
import ProfileFeedback from "@/src/components/Profile/ProfileFeedback";

const Map = dynamic(() => import("@/src/components/Map/index"), { ssr: false });

export async function getServerSideProps({ query }) {
  const id = query.id.toString();
  const baseUrl = process.env.API_URL;
  const googleKey = process.env.GOOGLE_MAP_KEY;
  const url = `${baseUrl}/returned?id=${id}`;
  const returnedItem = await fetch(url).then((response) => response.json());

  return {
    props: {
      returnedItem: returnedItem[0],
      googleKey,
    },
  };
}

const libraries = ["places"];
function ReturnedPage({ returnedItem, googleKey }) {
  const [returnedItemDate, setReturnedItemDate] = useState(
    dayjs(returnedItem.dataLimite)
  );
  const [locations, setLocations] = useState([]);
  const [destination, setDestination] = useState(returnedItem.coordenadas);
  const router = useRouter();

  const { isLoaded } = useLoadScript({
    googleMapsApiKey: googleKey,
    libraries: libraries,
    id: "google-map-script",
  });

  return (
    <>
      <Head>
        <title>Acompanhando a devolução {returnedItem.titulo}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Paper
        elevation={3}
        sx={{
          height: "100%",
          display: "flex",
          flexDirection: "column",
        }}
      >
        <Grid item flexBasis={"100%"}>
          <Map
            locations={locations}
            destination={destination}
            isLoaded={isLoaded}
          />
        </Grid>
        <Grid container item>
          <Grid item xs={4}>
            <ProfileFeedback />
          </Grid>
        </Grid>
      </Paper>
    </>
  );
}
ReturnedPage.PageLayout = InternalLayout;

export default ReturnedPage;
