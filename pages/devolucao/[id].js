import { useState } from "react";
import Head from "next/head";
import { InternalLayout } from "@/src/layout/internalLayout";
import { useRouter } from "next/router";
import { updateReturnedItem } from "@/src/services/ReturnedService";
import { Button, Grid, Paper } from "@mui/material";
import { DatePicker, LocalizationProvider } from "@mui/x-date-pickers";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import dayjs from "dayjs";
import "dayjs/locale/pt-br";
import dynamic from "next/dynamic";
import { LocationSearchResultContainer, LocationSearchResultItem } from "@/src/components/Autocomplete/locationResultItem";
import { useLoadScript } from "@react-google-maps/api";
import InputSearchLocation from "@/src/components/Autocomplete/InputSearchLocation";

const Map = dynamic(() => import("@/src/components/Map/index"), { ssr: false });

export async function getServerSideProps({ query }) {
  const id = query.id.toString();
  const baseUrl = process.env.API_URL;
  const googleKey = process.env.GOOGLE_MAP_KEY;
  const url = `${baseUrl}/returned?id=${id}`;
  const returnedItem = await fetch(url).then((response) => response.json());
  
  return {
    props: {
      returnedItem: returnedItem[0],
      googleKey
    },
  };
}

const libraries = ["places"];
function ReturnedPage({ returnedItem, googleKey }) {
  const [returnedItemDate, setReturnedItemDate] = useState(
    dayjs(returnedItem.dataLimite)
  );
  const [results, setResults] = useState([]);
  const [locations, setLocations] = useState([]);
  const [destination, setDestination] = useState(returnedItem.coordenadas);
  const router = useRouter();

  const handleSave = async () => {
    returnedItem.coordenadas = destination;

    updateReturnedItem(returnedItem).then(() => {
      router.push("/");
    });
  };

  function onPlaceChanged(place) {
    setDestination(place);
  }

  function onResult(locationList) {
    setLocations(locationList);
    setResults(locationList);
  }

  function handleReturnedDate(newDate) {
    setReturnedItemDate(newDate);
    returnedItem.dataLimite = newDate.$d;
  }
  

  const { isLoaded } = useLoadScript({
    googleMapsApiKey: googleKey,
    libraries: libraries,
    id: "google-map-script",
  });

  return (
    <>
      <Head>
        <title>Editando a devolução {returnedItem.titulo}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Paper
        elevation={3}
        sx={{
          p: "1em",
          height: "100%",
        }}
      >
        <Grid container spacing={2} sx={{ height: "100%" }} flexDirection={"column"}>
          <InputSearchLocation onPlaceChanged={onPlaceChanged} isLoaded={isLoaded} onResult={onResult} />
          <Grid container item xs>
            <Grid container item xs={2} spacing={2} flexDirection={"column"}>
              <Grid item xs>
                <LocationSearchResultContainer>
                  {results.map((result) => (
                    <LocationSearchResultItem
                      key={result.place_id}
                      onClick={() => setDestination(result)}
                      groupName={"returnedLoc"}
                      title={result.name}
                      subtitle="R$14,20"
                    />
                  ))}
                </LocationSearchResultContainer>
              </Grid>
              <Grid item xs={"auto"}>
                <LocalizationProvider
                  dateAdapter={AdapterDayjs}
                  adapterLocale="pt-br"
                >
                  <DatePicker
                    label="Data limite"
                    onChange={(newDate) => handleReturnedDate(newDate)}
                    value={returnedItemDate}
                  />
                </LocalizationProvider>
              </Grid>
              <Grid
                item
                container
                xs={"auto"}
                justifyContent={"end"}
                flexDirection={"column"}
              >
                <Button
                  xs={12}
                  variant="contained"
                  size="large"
                  color="info"
                  onClick={handleSave}
                >
                  SALVAR
                </Button>
              </Grid>
            </Grid>
            <Grid item xs pl={2}>
              <Map
                locations={locations}
                destination={destination}
                isLoaded={isLoaded}
              />
            </Grid>
          </Grid>
        </Grid>
      </Paper>
    </>
  );
}
ReturnedPage.PageLayout = InternalLayout;

export default ReturnedPage;
