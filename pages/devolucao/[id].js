import { useState, useEffect } from "react";
import Head from "next/head";
import { InternalLayout } from "@/src/layout/internalLayout";
import { useRouter } from "next/router";
import { updateReturnedItem } from "@/src/services/ReturnedService";
import {
  Button,
  Grid,
  IconButton,
  InputBase,
  Paper,
  Typography,
} from "@mui/material";
import { Search } from "@mui/icons-material";
import { DatePicker, LocalizationProvider } from "@mui/x-date-pickers";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import dayjs from "dayjs";
import "dayjs/locale/pt-br";
import dynamic from "next/dynamic";
import { geocode } from "nominatim-browser";
import {
  MapResultContainer,
  MapResultItem,
} from "@/src/components/map/locationResultItem";
import { formatDate } from "@/src/utils/date";
import { useLoadScript } from "@react-google-maps/api";
const Map = dynamic(() => import("@/src/components/map/index"), { ssr: false });
const AutoCompleteLocation = dynamic(() => import("@/src/components/map/AutoCompleteLocation"), { ssr: false });

export async function getServerSideProps({query}) {
  const id = query.id.toString();
  const baseUrl = process.env.API_URL;
  const url = `${baseUrl}/returned?id=${id}`;
  const returnedItem = await fetch(url).then(response => (response.json()));

  return {
      props: {
        returnedItem: returnedItem[0],
      }
  }
}

const libraries = ["places"];
function ReturnedPage({returnedItem}) {
  const [searchValue, setSearchValue] = useState("");
  const [returnedItemDate, setReturnedItemDate] = useState(dayjs(new Date()));
  const [results, setResults] = useState([]);
  const [locations, setLocations] = useState([]);
  const [destination, setDestination] = useState(null);
  const router = useRouter();

  const handleSearchSubmit = async () => {
    if (searchValue) {
      const response = await geocode({ street: searchValue });
      
      setResults(response);
      setLocations(
        response.map((locationItem) => ({lat: parseFloat(locationItem.lat), lng: parseFloat(locationItem.lon)}))
      );
    }
  };

  const handleSave = async () => {
    returnedItem.dataLimite = returnedItemDate.$d;
    updateReturnedItem(returnedItem)
    .then(() => {
      router.push("/devolucao");
    })
  };
  
  const flyToLocation = (destination) => {
    returnedItem.coordenadas = [destination.lat, destination.lon];
    returnedItem.localDevolucao = destination.display_name.split(',')[0];

    setDestination([destination.lat, destination.lon]);
  };

  function onPlaceChanged(place) {
    setDestination(place);
  }
  function onResult(locationList) {
    console.log(locationList)
      setLocations(locationList);
      setResults(locationList);
  }

  const { isLoaded } = useLoadScript({
    googleMapsApiKey: "AIzaSyDEI0-FS-iJl25mu23dSfFLzodOZZ4Vr3k",
    libraries: libraries,
    id: 'google-map-script',
  });

  return (
    <>
      <Head>
        <title>Editando devolução</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Paper
        elevation={3}
        sx={{
          p: "1em",
          height: "100%",
        }}
      >
        <Grid container spacing={2} sx={{ height: "100%" }}>
          <Grid item xs={12}>
            <IconButton type="button" sx={{ p: "10px" }} aria-label="search">
              <Search />
            </IconButton>
            <AutoCompleteLocation placeholder="Pesquisar devolução" onPlaceChanged={onPlaceChanged} isLoaded={isLoaded} onResult={onResult}/>
          </Grid>
          <Grid container item xs={12} spacing={2} height={600}>
            <Grid container item xs={2}>
              <MapResultContainer>
                {results.map((result) => (
                  <MapResultItem
                    key={result.place_id}
                    onClick={() => setDestination(result)}
                    groupName={"returnedLoc"}
                    title={result.name}
                    subtitle='R$14,20'
                  />
                ))}
              </MapResultContainer>
              {JSON.stringify(returnedItem)}
              <Grid item xs={12}>
                <LocalizationProvider
                  dateAdapter={AdapterDayjs}
                  adapterLocale="pt-br"
                >
                  <DatePicker
                    label="Data limite"
                    onChange={(newDate) => setReturnedItemDate(newDate)}
                    value={dayjs(returnedItem.dataLimite)}
                  />
                </LocalizationProvider>
              </Grid>
              <Grid item xs={12}>
                <Button xs={12} variant="contained" size="large" color="info" onClick={handleSave}>
                  SALVAR
                </Button>
              </Grid>
            </Grid>
            <Grid item sx={{ flex: 1 }}>
              <Map locations={locations} destination={destination} isLoaded={isLoaded} />
            </Grid>
          </Grid>
        </Grid>
      </Paper>
    </>
  );
}
ReturnedPage.PageLayout = InternalLayout;

export default ReturnedPage;
