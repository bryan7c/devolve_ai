import { useState, useEffect } from "react";
import Head from "next/head";
import { InternalLayout } from "@/src/layout/internalLayout";
import { useRouter } from "next/router";
import { getReturnedItems } from "@/src/services/ReturnedService";
import {
  Button,
  Grid,
  IconButton,
  InputBase,
  Paper,
  Typography,
} from "@mui/material";
import { Search } from "@mui/icons-material";
import { DatePicker, LocalizationProvider } from "@mui/x-date-pickers";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import dayjs from "dayjs";
import "dayjs/locale/pt-br";
import dynamic from "next/dynamic";
import { geocode } from "nominatim-browser";
const Map = dynamic(() => import("@/src/components/map/index"), { ssr: false });


function ReturnedPage() {
  const router = useRouter();
  const { id } = router.query;
  const [returnedItem, setReturnedItem] = useState(null);
  const [searchValue, setSearchValue] = useState("");
  const [returnedItemDate, setReturnedItemDate] = useState(dayjs(new Date()));
  const [results, setResults] = useState([]);
  const [locations, setLocations] = useState([]);
  

  const handleSearchSubmit = async () => {
    if (searchValue) {
      const response = await geocode({q: searchValue});
      setResults(response);
      setLocations(response.map(locationItem => ({text: locationItem.display_name, coords: [locationItem.lat, locationItem.lon]})));
    }
  };

  useEffect(() => {
    async function fetchReturned(returnedItem) {
      getReturnedItems(returnedItem).then((data) => {
        setReturnedItem(data[0]);
      });
    }
    fetchReturned({ id });
  }, []);

  return (
    <>
      <Head>
        <title>Editando devolução</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Paper
        elevation={3}
        sx={{
          p: "1em",
          height: "100%",
        }}
      >
        <Grid container spacing={2} sx={{ height: "100%" }}>
          <Grid item xs={12}>
            <IconButton type="button" sx={{ p: "10px" }} aria-label="search">
              <Search />
            </IconButton>
            <InputBase
              placeholder="Pesquisar devolução"
              value={searchValue}
              onChange={event => setSearchValue(event.target.value)}
              onKeyDown={(event) => {
                if (event.key === 'Enter') {
                  handleSearchSubmit();
                }
              }}
            />
          </Grid>
          <Grid item xs={12} height={600}>
            <Grid container spacing={2} height={600}>
              <Grid item xs={2}>
                <Grid container>
                  <Grid item xs={12}>
                    <ul>
                      {results.map((result) => (
                        <li key={result.place_id}>
                          {result.display_name} ({result.lat}, {result.lon})
                        </li>
                      ))}
                    </ul>
                    {JSON.stringify(returnedItem)}
                  </Grid>
                  <Grid item xs={12}>
                    <LocalizationProvider
                      dateAdapter={AdapterDayjs}
                      adapterLocale="pt-br"
                    >
                      <DatePicker
                        label="Data limite"
                        onChange={(newDate) => handleDateFilter(newDate)}
                        value={returnedItemDate}
                      />
                    </LocalizationProvider>
                  </Grid>
                  <Grid item xs={12}>
                    <Button
                      xs={12}
                      variant="contained"
                      size="large"
                      color="info"
                    >
                      CRIAR DEVOLUÇAO
                    </Button>
                  </Grid>
                </Grid>
              </Grid>
              <Grid item sx={{ flex: 1 }}>
                <Map locations={locations} />
              </Grid>
            </Grid>
          </Grid>
        </Grid>
      </Paper>
    </>
  );
}
ReturnedPage.PageLayout = InternalLayout;

export default ReturnedPage;
